\include{Sweave}
\documentclass [a4paper]{article}
%\VignetteIndexEntry{qfaBayes}
\usepackage{url}
\usepackage{hyperref}            
\title{qfaBayes - An R package for carrying out Bayesian Quantitative Fitness Analysis}
\author{Jonathan Heydari}
\begin{document}
\setlength\parindent{0pt}
\maketitle

\section{Introduction}

Quantitative Fitness Analysis (QFA) is an experimental and computational workflow for comparing fitnesses of microbial cultures grown in parallel.  QFA can be applied to focused observations of single cultures but is most useful for genome-wide genetic interaction or drug screens investigating up to thousands of independent cultures.  The central experimental method is the inoculation of independent, dilute liquid microbial cultures onto solid agar plates which are incubated and regularly photographed.  Photographs from each time-point are analyzed, producing quantitative cell density estimates, which are used to construct growth curves, allowing quantitative fitness measures to be derived.  Culture fitnesses can be compared to quantify and rank genetic interaction strengths or drug sensitivities. The effect on culture fitness of any treatments added into substrate agar (e.g. small molecules, antibiotics or nutrients) or applied to plates externally (e.g. UV irradiation, temperature) can be quantified by QFA.

Detailed descriptions of how to carry out QFA experiments are available in open access articles, particularly in \href{http://dx.doi.org/10.3791/4018}{Banks et al. (2012)} and  \href{http://dx.doi.org/10.1371/journal.pgen.1001362}{Addinall et al. (2011)}.  The purpose of this document is to describe, in detail, some of the computational methods available in the qfa R package for summarising experimentally observed growth curves during QFA, and to demonstrate the computational component of QFA using some small, example datasets.

\section{QFA data}

The raw experimental data generated by QFA consists of timeseries photographs of cultures growing on agar plates.  The first step in the computational component of the QFA workflow is to convert these photographic observations into cell density estimates for cultures in each position on each plate analysed.  The Colonyzer image analysis tool (\href{http://dx.doi.org/10.1186/1471-2105-11-287}{Lawless et al. (2010)}) is designed for this task and can be downloaded from its \href{http://research.ncl.ac.uk/colonyzer/}{website}.  Once all the images have been successfully analysed, the next step is to use the qfa R package to associate culture locations with genotypes and to construct growth curves (cell density estimates over time) for each culture.

\section{Installing the qfa package}

The qfa package source code is available for download from \href{http://r-forge.r-project.org/projects/qfa}{R-Forge}, and so it should be possible to install the latest version using the R package management system on a wide range of operating systems by executing the following command within an R environment: 
\begin{verbatim}
install.packages("qfaBayes",repos="http://r-forge.r-project.org")
\end{verbatim}

Once installed, the package can be loaded ready for use with
\begin{verbatim}
library(qfaBayes)
\end{verbatim}

Please note that this installation method will typically only work using the latest version of R (which can be freely downloaded from the R \href{http://www.r-project.org/}{website}).  Alternatively, instructions for accessing the source code for the package from are available \href{http://r-forge.r-project.org/scm/?group_id=880}{here}.

\section{Function documentation}

The following command will provide an overview of functions available within the qfa package together with brief descriptions of what they do and links to detailed descriptions indicating input arguments and output:
\begin{verbatim}
help(package="qfaBayes")
\end{verbatim}
This document can be accessed at any time with:
\begin{verbatim}
vignette("qfaBayes")
\end{verbatim}
Documentation for specific functions can be obtained using the usual R mechanisms. For example, help on the function \verb$colonyzer.read$ can be obtained with:
\begin{verbatim}
?colonyzer.read
\end{verbatim}

\section{General overview}

This R package consists of a wide range of functions, which can be grouped according to their purpose.

\subsection{Reading and formatting data}
\verb$colonyzer.read$
This function reads in image analysis output from Colonyzer, together with files containing experimental metadata and it associates cell density estimates with culture type (e.g. genotype) and treatment (e.g. temperature, drug concentration) for each culture.  All data are bound together into a data.frame object, with rows representing unique observations of individual cultures.

\subsection{Summarizing observed growth curves}
\subsubsection{Generalised Logistic Growth Model: the \texttt{Glogist} function}
The original QFA analysis presented in \href{http://dx.doi.org/10.1371/journal.pgen.1001362}{Addinall et al. (2011)} involved fitting the logistic model to experimentally observed growth curves.  During subsequent screens using automated incubators and automated imagers where we capture images much more frequently and cultures grow in environments with different degrees of humidity control, we have found that in many cases observed growth curves do not fit the logistic model perfectly.  In particular we have found that the symmetry inherent in the logistic model is not always observed.  In this package we use the more flexible generalised logistic differential equation, which has an additional shape parameter $\nu$ to account for asymmetrical growth curves.  Importantly, the original logistic model can be recovered from the generalised model by setting $\nu = 1$:

\begin{equation}
\frac{dg}{dt}=rg\left(1-\left(\frac{g}{K}\right)^\nu\right)
\end{equation}

Which has an analytical solution:

\begin{equation}
g(t,g_0,r,K,\nu)=\frac{K}{\left(1+\left(-1+\left(\frac{K}{g_0}\right)^v\right)e^{-rvt}\right)^\frac{1}{\nu}}
\end{equation}

\begin{description}
\item[]$K$	Culture carrying capacity (AU). Same units as (normalised) cell density observed in growth curve.
\item[]$r$	Culture growth rate parameter (per day).
\item[]$g_0$	Inoculum denisty (AU). Same units as (normalised) cell density observed in growth curve.
\item[]$\nu$	Shape parameter. Recover logistic model with $\nu = 1$.
\item[]$t$	Time since inoculation (d).
\end{description}

\subsubsection{Smoothing or interpolation: the \texttt{loapproxfun} function}
This package also provides a model-free alternative for summarising experimentally observed growth curves.  The \verb$loapproxfun$ function is a function closure. Given a timeseries dataset (growth curve data) it returns an appropriate approximating function. If a loess smoothing span parameter appropriate for the data capture frequency (frequency of photographs) is specified, the approximating function will be a smoothed version of the data in the range of observations. For all points before the first observation, the approximating function takes the value of the first smoothed version of the data. Simiarly, beyond the final observation, the function returns the smoothed version of the data at the final timepoint. If an inappropriate span parameter is passed to this function it will return a linear interpolation approximating function instead. This can be more robust where the loess smoother would add spurious curves to datasets with sparse observations (e.g. data captured manually 2 or 3 times per day).

\subsubsection{Summarizing growth curves: the \texttt{qfa.fit} function}
This function fits the generalised logistic model (represented by the \texttt{Glogist} function) to sets of observed timecourses by default (though this can be disabled if model-based fitnesses are not of interest), returning the model parameter values (listed above) which best fit the data.  These parameters can be used to construct model-based fitnesses later (see below).  At the same time \texttt{qfa.fit} also summarizes data with the \texttt{loapproxfun} function.  Storing the coefficients from the \texttt{loapproxfun} function is impractical and so these are used directly to generate two model-free fitness measures: a Single Time Point (nSTP) fitness surrogate and Area Under the growth Curve (nAUC).  The ``n'' indicates ``numerical'' or model-free, and is used to differentiate from equivalent measures of fitness which can be derived from the genralised logistic growth curves.  nSTP returns the cell density estimate for a time after inoculation specified by the \texttt{STP} argument to \texttt{qfa.fit} (the default is a value well after culture growth is complete).  nAUC is the integral under the smoothed (or interpolated) curve from inoculation until a time \texttt{AUCLim} after inoculation.  Again, \texttt{AUCLim} is an argument to \texttt{qfa.fit} and its default value is set to 5 days.

\subsubsection{Generating fitnesses from the generalised logistic model: the \texttt{makeFitness} function}
This function generates several fitnesses based on the generalised logistic model parameters estimated using the \texttt{qfa.fit} function:

\begin{description}
\item[]$MDR$ Maximum Doubling Rate is the generalised logistic version of the $MDR$ fitness measure presented by \href{http://dx.doi.org/10.1371/journal.pgen.1001362}{Addinall et al. (2011)}.
\begin{equation}
MDR=\frac{r\nu}{log\left(1-\frac{2^\nu-1}{\left(2^\nu\right)*\left(\frac{g_0}{K}\right)^\nu-1}\right)}
\end{equation}
\item[]$MDP$ Maximum Doubling Potential is the generalised logistic version of the $MDP$ fitness measure presented by \href{http://dx.doi.org/10.1371/journal.pgen.1001362}{Addinall et al. (2011)}.
\begin{equation}
MDP=\frac{log(\frac{K}{g_0})}{log(2)}
\end{equation}
\item[$MDR\times{}MDP$] The generalised logistic version of the $MDR\times{}MDP$ fitness measure presented by \href{http://dx.doi.org/10.1371/journal.pgen.1001362}{Addinall et al. (2011)}.
\item[$AUC$] Area Under the Growth curve described by the generalised logistic model.  This is essentially the integral under the modelled growth curve (above the inoculum density) from inoculation to an arbitary later timepoint.
\begin{equation}
AUC=\int_{0}^{AUCLim} g(t,g_0,r,K,\nu),\mathrm{d}x - g_0 AUCLim 
\end{equation}
\item[$DT$]  Estimated time taken for the culture to reach twice its inoculum density.  THIS IS NOT CORRECT.
\begin{equation}
DT=\frac{1}{MDR}
\end{equation}

\end{description}


\subsection{Inferring genetic interaction strengths}
Addinall et al., 2011 present methods for statistical epistasiis analysis based on linear error models. For appropriately designed experiments, these functions can be used to compare sets of query mutation observations with expected observations, given observations of control mutation fitnesses and the expected effect of the query mutation, given genome wide observations. Effectively, we use genome-wide observations to construct a linear predictor of query mutation fitness given control mutation fitness, and search for deviations from this prediction. Mutation fitnesses come from multiple observations and these can be summarised by mean or median fitness, and significance of deviations can correspondingly be estimated by Student's t-test or the Mann-Whitney test, both corrected for multiple comparisons. Analysis based on mean/t-test is preferred to that using median/Mann-Whitney test, since the latter have greater statistical power, however, in the case where it has not been possible to perform adequate quality control on the source data (e.g. there are occasionaly contaminants, or missing cultures, resulting in statistical outliers) the former may be preferable.

\subsection{Auxiliary functions}
Together with the functions for carrying out the raw analysis above, we provide several functions for visualising the data, the fit of the logistic model to the data and the visualisation of evidence for epistatic interaction. These visualisation tools are important for tracking bugs and increasing user confidence in the validity of the sophisticated QFA workflows.


\end{document}

% eof
